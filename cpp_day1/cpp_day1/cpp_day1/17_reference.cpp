// 17_reference.cpp
#include <iostream>
using namespace std;

/*
int main() {
	int n = 42;

	int* p = &n;
	*p = 100;
	cout << *p << endl;
	cout << n << endl;
}
// n의 값이 100, n의 주소값이 100번지,
// p에는 n의 주소값을 담아 n의 값에 접근하여 n을 100으로 변경
*/

// int* : 포인터 타입 => 주소를 담을 수 있는 변수 타입
// int& : 레퍼런스 타입 => 기존 메모리에 대한 새로운 이름을 부여할 수 있다.


// 참조타입
// 개념 : 기존 메모리에 대한 새로운 이름을 부여할 수 있다.

int main() {
	int n = 42;
	int& r = n; // n 이라는 변수에 r 이라는 새로운 이름을 부여
	// 포인터와 다른 개념으로 기존의 메모리에 새로운 이름을 부여하는 개념.
	// 포인터는 기존 변수의 주소를 갖고 있는 개념이기 때문에 포인터의 메모리를 관리해야하지만,
	// 레퍼런스는 메모리를 관리하지 않아도 된다.
	r = 100;
	cout << r << endl;
	cout << n << endl;
	// r의 변경은 n의 변경으로 이어진다.
}