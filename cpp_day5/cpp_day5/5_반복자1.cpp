// 반복자
#include <iostream>
#include <vector>
#include <list>

int main() {
	int x[5] = { 1,2,3,4,5 };
	// 배열은 1번째 요소의 시작주소를 알면 모든 요소를 열거할 수 있다.
	//int* p1 = x;
	//++p1;

	// 반복자 : 컨테이너의 모든 요소를 열거하기 위해 사용하는 객체
	//			컨테이너 내부 구조에 관계없이 동일한 방식(++ 연산자)으로
	//			모든 요소를 열거할 수 있다.
	//			"연산자 재정의 기술"
	// 
	
	//std::vector<int> c = { 1, 2, 3, 4, 5 }; // 연속된 메모리
	std::list<int> c = { 1,2,3,4,5 };		// 떨어진 메모리
	auto p1 = c.begin(); // 이건 연속된 메모리건 떨어진 메모리건 컨테이너의 내부 구조에 관계없이 동일한 방식( ++ 연산자)
						//로 모든 요소를 열거할 수 있다.

	// p1은 진짜 포인터는 아닌 객체(반복자) 이지만, 포인터처럼 생각하고 사용하면 된다.

	std::cout << *p1 << std::endl; // 1
	++p1; // p1.operator++() 함수 호출
	std::cout << *p1 << std::endl; // 2
}